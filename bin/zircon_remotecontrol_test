#!/usr/bin/env perl

use strict;
use warnings;
use feature qw( switch );

use Getopt::Long;
use Tk;
use Zircon;

# parse the command line
my $remote_selection_id;
GetOptions(
    'remote_selection_id=s' => \$remote_selection_id,
    ) or die 'command line error';
my $is_child =
    defined $remote_selection_id
    && $remote_selection_id ne '';

my $app_id =
    sprintf 'Zircon RemoteControl (%s)'
    , $is_child ? 'child' : 'parent';

# create the main window
my $main_window = Tk::MainWindow->new;
$main_window->title($app_id);

# create the Zircon connection
my $server = Server->new;
my $zircon = Zircon->new(
    '-app_id' => $app_id,
    '-widget' => $main_window,
    '-server' => $server,
    );

# create the GUI

my $zircon_message = '';

my $button_frame =
    $main_window->Frame->pack('-fill' => 'both');

sub send_ping {
    $zircon_message = '';
    $zircon->send_ping(
        sub {
            my ($result) = @_;
            $zircon_message =
                sprintf 'Client: ping: %s', _message($result);
        });
    return;
}

Tk::grid(
    $button_frame->Button(
        '-text'    => 'Ping',
        '-command' => \&send_ping),
    $button_frame->Button(
        '-text'    => 'Exit',
        '-command' => \&exit),
    '-sticky' => 'nsew');

$button_frame->gridColumnconfigure($_, '-weight' => 1) for 0..1;

$main_window
    ->Label(
    '-width'        => 50,
    '-textvariable' => \$zircon_message,
    '-relief'       => 'sunken')
    ->pack('-fill' => 'both');

# parent forks child, child sends handshake back to parent
if ($is_child) {
    $zircon_message = '';
    $zircon->send_handshake(
        $remote_selection_id,
        sub {
            my ($result) = @_;
            $zircon_message =
                sprintf 'Client: handshake: %s'
                , _message($result);
        });
}
else {
    my $pid = fork;
    defined $pid
        or die 'fork() failed';
    if ($pid) {
        # child, so exec()
        exec $0, @ARGV, '-remote_selection' => $zircon->connection->local_selection_id;
        die 'exec() failed';
    }
}

MainLoop();

exit;

sub _message {
    my ($result) = @_;
    given ($result) {
        when ($_->isa('Zircon::Result::Reply')) {
            return $result->success ? 'succeeded' : 'failed';
        }
        when ($_->isa('Zircon::Result::Timeout')) {
            return 'timeout';
        }
        when (ref) {
            return sprintf 'unknown result: class: %s', ref;
        }
        default {
            return 'unknown result';
        }
    }
}

package Server;

use base qw( Zircon::Server );

sub new {
    my ($pkg) = @_;
    my $new = { };
    bless $new, $pkg;
    return $new;
}

sub zircon_server_log {
    my ($self, $message) = @_;
    $zircon_message =
        sprintf 'Server: %s', $message;
    return;
}
