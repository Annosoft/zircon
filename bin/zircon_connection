#!/usr/bin/env perl

use strict;
use warnings;
use feature qw( switch );

use Getopt::Long;

use Tk;
use Tk::Frame;
use Tk::Button;
use Tk::Checkbutton;
use Tk::Optionmenu;
use Tk::Entry;
use Tk::Label;

use Zircon::Context::Tk;
use Zircon::Connection;

my (
    $tag,
    $name,
    $local_selection,
    $remote_selection,
    );

GetOptions(
    'tag=s'              => \$tag,
    'name=s'             => \$name,
    'local_selection=s'  => \$local_selection,
    'remote_selection=s' => \$remote_selection,
    ) or die 'command line error';

my $main_window = MainWindow->new;
$main_window->title(
    sprintf 'Zircon: Connection: %s: %s'
    , $name, $tag);

my $handler = Handler->new;

my $context = Zircon::Context::Tk->new(
    '-widget' => $main_window);

my $connection = Zircon::Connection->new(
    '-handler' => $handler,
    '-context' => $context,
    '-debug'   => 1,
    );
$connection->local_selection_id($local_selection);
$connection->remote_selection_id($remote_selection);

my $test_frame =
    $main_window
    ->Frame(
        '-borderwidth' => 2,
        '-relief'      => 'sunken')
    ->pack(
        '-side' => 'top',
        '-fill' => 'both');

sub control_label {
    my ($text, $option_list, $variable) = @_;
    my $label = $test_frame->Label('-text' => $text);
    return $label;
}

sub control_button_set {
    my ($text, $option_list, $variable) = @_;
    my $frame = $test_frame->Frame;
    for (@{$option_list}) {
        my ($text2, $key) = @{$_};
        $frame->Radiobutton(
            '-text'     => $text2,
            '-anchor'   => 'w',
            '-variable' => $variable,
            '-value'    => $key,
            )
            ->pack(
            '-side' => 'top',
            '-fill' => 'both',
            );
    }
    return $frame;
}

my $when;
my $when_list = [ 
    [ 'Client: request',    'client_request'    ],
    [ 'Client: waiting',    'client_waiting'    ],
    [ 'Client: reply',      'client_reply'      ],
    [ 'Client: processing', 'client_processing' ],
    [ 'Server: inactive',   'inactive'          ],
    [ 'Server: request',    'server_request'    ],
    [ 'Server: processing', 'server_processing' ],
    [ 'Server: reply',      'server_reply'      ],
    ];

my $action = 'ok';
my $action_list = [
    [ qw( OK     ok   ) ],
    [ qw( Hang   hang ) ],
    [ qw( die()  die  ) ],
    [ qw( exit() exit ) ],
    ];

my $control_list = [
    [ 'when',   $when_list,   \$when   ],
    [ 'action', $action_list, \$action ],
    ];

Tk::grid(
    ( map { control_label(@{$_}); }
      @{$control_list} ),
    '-sticky' => 'nesw');
Tk::grid(
    ( map { control_button_set(@{$_}); }
      @{$control_list}),
    '-sticky' => 'nesw');

my (
    $zircon_send,
    $zircon_request,
    $zircon_reply,
    $zircon_receive,
    $zircon_message,
    );
my $_dummy = # layout hack
    $zircon_send =
    $zircon_request =
    $zircon_reply =
    $zircon_receive =
    $zircon_message =
    '';

my $send_frame =
    $main_window
    ->Frame
    ->pack(
        '-side' => 'top',
        '-fill' => 'both');

{
    my $rowspan = 2;
    my $row = 0;
    for my $text (qw(
        Client Server ) ) {
        Tk::grid(
            $send_frame->Label(
                '-text'   => $text,
                '-anchor' => 'w',
                '-relief' => 'sunken'),
            '-row'     => $row,
            '-rowspan' => $rowspan,
            '-sticky'  => 'nsew');
        $row += $rowspan;
    }
}

sub zircon_send {
    $zircon_receive = $zircon_message = '';
    $connection->send($zircon_send);
    return;
}

sub widget_row {
    my ($text, $text_variable) = @{$_};
    my $row = [
        $send_frame->Label(
            '-text'   => $text,
            '-relief' => 'sunken',
            '-anchor' => 'w'),
        $send_frame->Label(
            '-textvariable' => $text_variable,
            '-relief'       => 'sunken',
            '-anchor'       => 'w'),
        ];
    return $row;
}

my $widget_array = [
    [
     $send_frame->Button(
         '-text' => 'Send',
         '-command' => \&zircon_send),
     $send_frame->Entry(
         '-textvariable' => \$zircon_send),
    ],
    ( map { widget_row @{$_}; }
      [ 'Receive', \$zircon_receive ],
      [ 'Request', \$zircon_request ],
      [ 'Reply',   \$zircon_reply   ],
    ),
    ];

{
    my $row = 0;
    for my $widget_row (@{$widget_array}) {
        my $column = 1;
        for my $widget (@{$widget_row}) {
            Tk::grid(
                $widget,
                '-row'    => $row,
                '-column' => $column,
                '-sticky' => 'nsew');
            $column++;
        }
        $row++;
    }
}

$send_frame->gridColumnconfigure(
    1, '-weight' => 1);

my $peer_tag_hash = {
    'A' => 'B',
    'B' => 'A',
};

$main_window
    ->Label(
    '-textvariable' => \$zircon_message,
    '-relief'       => 'sunken')
    ->pack('-fill' => 'both');

sub run_peer {
    my $pid = fork;
    defined $pid
        or die "run_peer(): fork() failed\n";
    if ($pid == 0) {
        my $peer_tag = $peer_tag_hash->{$tag};
        defined $peer_tag or die sprintf
            "run_peer(): bogus tag '%s'\n", $tag;
        exec "$0"
            , '-tag'              => $peer_tag
            , '-name'             => $name
            , '-local_selection'  => $remote_selection
            , '-remote_selection' => $local_selection
            ;
        die "run_peer(): exec() failed\n";
    }
    return;
}

$main_window
    ->Button(
    '-text'    => 'Peer',
    '-command' => \&run_peer)
    ->pack;

MainLoop();

package Handler;

use base qw( Zircon::Connection::Handler );

sub new {
    my ($pkg) = @_;
    my $new = { };
    bless $new, $pkg;
    return $new;
}

sub zircon_connection_request {
    my ($self, $request) = @_;
    $zircon_request = $request;
    my $reply = sprintf
        q(%s: %s: received: '%s')
        , $name, $tag, $request;
    _process('server_processing');
    $zircon_reply = $reply;
    return $reply;
}

sub zircon_connection_reply {
    my ($self, $reply) = @_;
    _process('client_processing');
    $zircon_receive = $reply;
    $zircon_message = 'OK!';
    return;
}

sub zircon_connection_debug {
    my ($key) = @_;
    _process($connection->state);
    return
}

sub zircon_connection_timeout {
    $zircon_message = sprintf
        "timeout during '%s'"
        , $connection->state;
    return;
}

sub _process {
    my ($state) = @_;
    if (defined $when && $state eq $when) {
        given ($action) {
            when ('hang') { $main_window->after(5000); }
            when ('die')  { die "die: as requested\n" }
            when ('exit') { exit }
        }
    }
    return;
};
