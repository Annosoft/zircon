#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

use Tk;
use Tk::Button;
use Tk::Checkbutton;
use Tk::Entry;
use Tk::Label;

use Zircon::Connection;

my (
    $tag,
    $name,
    $local_selection,
    $remote_selection,
    );

GetOptions(
    'tag=s'              => \$tag,
    'name=s'             => \$name,
    'local_selection=s'  => \$local_selection,
    'remote_selection=s' => \$remote_selection,
    ) or die 'command line error';

my $main_window = MainWindow->new;
$main_window->title(
    sprintf 'Zircon: Connection: %s: %s'
    , $name, $tag);

my $handler = Handler->new;

my $connection = Zircon::Connection->new(
    '-handler' => $handler,
    '-widget'  => $main_window,
    );
$connection->local_selection($local_selection);
$connection->remote_selection($remote_selection);

my (
    $zircon_server_die,
    $zircon_server_death_rattle,
    $zircon_client_die,
    $zircon_client_death_rattle,
    );
$zircon_server_die = 0;
$zircon_server_death_rattle = 'Server says "Arrgh!"';
$zircon_client_die = 0;
$zircon_client_death_rattle = 'Client says "Arrgh!"';

my $death_frame =
    $main_window
    ->Frame
    ->pack(
        '-side' => 'top',
        '-fill' => 'both');

for (
    [ 'Die (server)', \$zircon_server_die, \$zircon_server_death_rattle ],
    [ 'Die (client)', \$zircon_client_die, \$zircon_client_death_rattle ],
    ) {
    my ($text, $variable, $text_variable) = @{$_};
    $death_frame
        ->Checkbutton(
        '-text' => $text,
        '-anchor' => 'w',
        '-variable' => $variable)
        ->grid(
        $death_frame
        ->Entry('-textvariable' => $text_variable),
        '-sticky' => 'nsew');
}

$death_frame->gridColumnconfigure(
    1, '-weight' => 1);

my (
    $zircon_send,
    $zircon_request,
    $zircon_reply,
    $zircon_receive,
    );
my $_dummy = # layout hack
    $zircon_send =
    $zircon_request =
    $zircon_reply =
    $zircon_receive =
    '';

my $send_frame =
    $main_window
    ->Frame
    ->pack(
        '-side' => 'top',
        '-fill' => 'both');

sub zircon_send {
    $zircon_receive = '';
    $connection->send($zircon_send);
    return;
}

$send_frame
    ->Button(
    '-text' => 'Send',
    '-command' => \&zircon_send)
    ->grid(
    $send_frame->Entry(
        '-textvariable' => \$zircon_send),
    '-sticky' => 'nsew');

for (
    [ 'Request', \$zircon_request ],
    [ 'Reply',   \$zircon_reply   ],
    [ 'Receive', \$zircon_receive ],
    ) {
    my ($text, $text_variable) = @{$_};
    $send_frame
        ->Label(
        '-text'   => $text,
        '-anchor' => 'w')
        ->grid(
        $send_frame
        ->Label(
            '-textvariable' => $text_variable,
            '-relief'       => 'sunken',
            '-anchor'       => 'w'),
        '-sticky' => 'nsew');
}

$send_frame->gridColumnconfigure(
    1, '-weight' => 1);

my $peer_tag_hash = {
    'A' => 'B',
    'B' => 'A',
};

sub run_peer {
    my $pid = fork;
    defined $pid
        or die "run_peer(): fork() failed\n";
    if ($pid == 0) {
        my $peer_tag = $peer_tag_hash->{$tag};
        defined $peer_tag or die sprintf
            "run_peer(): bogus tag '%s'\n", $tag;
        exec "$0"
            , '-tag'              => $peer_tag
            , '-name'             => $name
            , '-local_selection'  => $remote_selection
            , '-remote_selection' => $local_selection
            ;
        die "run_peer(): exec() failed\n";
    }
    return;
}

$main_window
    ->Button(
    '-text'    => 'Peer',
    '-command' => \&run_peer)
    ->pack;

MainLoop();

package Handler;

use base qw( Zircon::Connection::Handler );

sub new {
    my ($pkg) = @_;
    my $new = { };
    bless $new, $pkg;
    return $new;
}

sub zircon_connection_request {
    my ($self, $request) = @_;
    $zircon_request = $request;
    my $reply = sprintf q(%s: received: '%s'), $name, $request;
    die $zircon_server_death_rattle if $zircon_server_die;
    $zircon_reply = $reply;
    return $reply;
}

sub zircon_connection_reply {
    my ($self, $reply) = @_;
    die $zircon_client_death_rattle if $zircon_client_die;
    $zircon_receive = $reply;
    return;
}
