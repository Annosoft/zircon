#!/usr/bin/env perl

use strict;
use warnings;

use IO::Handle;
use Time::HiRes qw( gettimeofday tv_interval );
use Getopt::Long;
use Tk;

use Zircon::Tk::Context;
use Zircon::Connection;

my $t0;
sub main {
    $t0 = [ 1000*int(time() /1000), 0 ]; # short timestamps, locally synchronised

    my $coloured;
    GetOptions('colour|C' => \$coloured)
      or @ARGV=();

    die "Syntax: $0 [ -C ] <local_selection> <remote_selection>\n
Reads from STDIN, writes to STDOUT.\n" unless 2 == @ARGV;
    my ($local_selection, $remote_selection) = @ARGV;

    $SIG{__WARN__} = sub {
        my ($msg) = @_;
        chomp $msg;
        $msg =~ s{\n}{\\N}g; # protect the ability to sort(1) out output
        my $clr = $local_selection gt $remote_selection ? 33 : 36;
        $msg = qq{\x1B[${clr}m$msg\x1b[00m} if $coloured;
        print tstamp().": $msg\n";
    };

    my $M = MainWindow->new;
    $M->title("$0 pid=$$");
    $M->Entry(-text => "$local_selection => $remote_selection")->pack;

    my $context = Zircon::Tk::Context->new(-widget => $M);

    my $handler = My::Handler->new();
    my $reader = My::StdinReader->new($M);

    my $connection = Zircon::Connection->new(-handler => $handler,
                                             -name => 'pipe',
                                             -context => $context);
    $handler->zconn($connection); # to call ->after for incoming request
    $reader->zconn($connection);  # to call ->send
    $handler->on_timeout(sub { $reader->try_send_soon });

    $connection->local_selection_id($local_selection);
    $connection->remote_selection_id($remote_selection);

    $M->iconify;

    warn "Done init.  Entering MainLoop.\n";
    MainLoop();
    warn "MainLoop finished.\n";
    return 0;
}

sub tstamp {
    my ($tv) = @_;
    return sprintf('%11.6f', tv_interval($t0, $tv));
}

main();


package My::StdinReader;
use strict;
use warnings;

use Try::Tiny;
use Time::HiRes qw( usleep );


sub new {
    my ($pkg, $widg, $zconn) = @_;
    my $self = { widg => $widg, zconn => $zconn, in_buff => '', queue => [] };
    bless $self, __PACKAGE__;
    $self->_init($widg);
    return $self;
}

sub _init {
    my ($self) = @_;

    my $fh = IO::Handle->new_from_fd(fileno(STDIN), 'r')
      or die "Can't dup STDIN: $!";
    $fh->blocking(0)
      or die "Can't make non-blocking STDIN: $!";
    $self->{fh} = $fh;

    $self->_read_notify(1);

    return ();
}

sub _read_notify {
    my ($self, $enable) = @_;
    my $cb = $enable ? [ $self, 'read_fh' ] : '';
    my $fh = $self->{fh};
    $self->{widg}->fileevent($fh, readable => $cb) if defined $fh;
    return ();
}

sub close {
    my ($self) = @_;
    $self->_read_notify(0); # cancel
    delete $self->{fh};
    return ();
}

sub fh_buffref {
    my ($self) = @_;
    return ($self->{fh}, \$self->{buffref});
}

sub queue {
    my ($self) = @_;
    return $self->{queue};
}

sub zconn {
    my ($self, @arg) = @_;
    ($self->{zconn}) = @arg if @arg;
    return $self->{zconn} or
      die "Need zconn set now";
}


sub read_fh {
    my ($self) = @_;
    my ($fh, $bufref) = $self->fh_buffref;
    my $Q = $self->queue;
    my $oldQlen = @$Q;

    my ($nchar, $eof) = (-1);
    while ($nchar) {
        if (@$Q > 100) { # arbitrary limit
            # don't read more just yet - let stdin fill and block the writer

            # fileevent would burn CPU.  Re-enable in try_send
            $self->_read_notify(0);

            last;
        }

        $nchar = $fh->read($$bufref, 100, length($$bufref));
        # 100/call was to show it's working sensibly

        if (!defined $nchar) {
            warn "I! read failed: $!\n"
              unless 11 == $!; # Resource temporarily unavailable
        } elsif (0 == $nchar) {
            warn "I] EOF\n";
            $eof = 1;
            $self->close;
        } else {
            warn "I> $nchar char\n";
        }

        while ($$bufref =~ s{\A(.*)\n}{}) {
            my $msg = $1;
            warn "Q> $msg\n";
            push @$Q, $msg;
        }
    }

    if ($eof) {
        if ($$bufref ne '') {
            warn "Q] $$bufref\n";
            push @$Q, $$bufref;
        }
        push @$Q, undef;
    }

    $self->try_send if @$Q > $oldQlen;
    return ();
}

sub try_send {
    my ($self) = @_;
    my $Q = $self->queue;
    my $zconn = $self->zconn;

    if (!@$Q) {
        # nothing to send
    } elsif ((my $S = $zconn->state) ne 'inactive') {
        warn "=} would send, but state=$S\n";
    } else {
        my $msg = shift @$Q;
        $self->_read_notify(1) if 50 == @$Q; # idempotent undo for read_fh
        if (!defined $msg) { # for EOF
            warn "[] close\n";
            $zconn->context->widget->destroy;
        } else {
            warn "=>   $msg\n";
            try {
                $zconn->after(sub { $self->sent($msg) });
                $zconn->send($msg);
            } catch {
                warn "*> send failed: $_";
            };
        }
    }

    return ();
}

sub try_send_soon {
    my ($self) = @_;
    # postpone the try_send because $handler->zircon_connection_timeout
    # happens before $connection->reset when state=client_waiting
    warn "~> Tk::after(0, try_send)\n";
    $self->{widg}->after(0, [ $self, 'try_send' ]);
    return ();
}

sub sent {
    my ($self, $msg) = @_;
    warn "  |> send finished: $msg\n";
    $self->try_send;
    return();
}


1;



package My::Handler;
use strict;
use warnings;

use base 'Zircon::Connection::Handler';


sub new {
    my ($pkg) = @_;
    return bless { }, __PACKAGE__;
}

sub zconn {
    my ($self, @arg) = @_;
    ($self->{zconn}) = @arg if @arg;
    return $self->{zconn} or
      die "Need zconn set now";
}

sub on_timeout {
    my ($self, @arg) = @_;
    ($self->{on_timeout}) = @arg if @arg;
    return $self->{on_timeout};
}


sub zircon_connection_request {
    my ($self, $request) = @_;
    warn "<=   $request\n";
    my $reply = main::tstamp().' ack';
    warn " ->  $reply\n";
    $self->zconn->after(sub { $self->zcreq_done($reply) });
    return $reply;
}

sub zircon_connection_reply {
    my ($self, $reply) = @_;
    warn " <-  $reply\n";
    return ();
}

sub zcreq_done {
    my ($self, $reply) = @_;
    warn "  <| request finished: $reply\n";
    return ();
}

sub zircon_connection_timeout {
    my ($self) = @_;
    warn "??   timeout\n";
    my $ont = $self->{on_timeout};
    $ont->() if defined $ont;
    return ();
}

1;


=head1 NAME

zircon_pipe - connects (stdin, stdout) to Zircon::Connection

=head1 SYNOPSIS

 zircon_pipe -C mumbly_bumble fibbly_fobble &

 # in another window
 zircon_pipe -C fibbly_fobble mumbly_bumble &

=head1 DESCRIPTION

This debug tool is a minimal message-passing command line tool for
L<Zircon::Connection> (not L<Zircon::Protocol>).

=head2 Merge & sort

It is a design goal that the output should merge usefully with its
peer's output,

 zircon_pipe -C zp_A zp_B > server.TXT &
 noise | zircon_pipe -C zp_B zp_A > client.TXT
 fg
 ^D
 sort server.TXT client.TXT | less -R

including when the libraries trace (L<Zircon::Trace>) is enabled.

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk
