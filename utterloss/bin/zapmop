#!/usr/bin/env perl

use strict;
use warnings;

no if $] >= 5.018, warnings => "experimental::smartmatch";
use feature qw( switch );

use Getopt::Long;
use Tk;
use Zircon::Protocol;
use Zircon::Context::ZMQ::Tk;

my $app_id = 'ZapMop';

# parse the command line
my ($conf_dir, $peer_socket);
GetOptions(
    'conf_dir=s'    => \$conf_dir,
    'peer-socket=s' => \$peer_socket,
    ) or die 'command line error';

# create the main window
my $main_window = Tk::MainWindow->new;
$main_window->title("zapmop from '$peer_socket'");

# create the Zircon connection
my $server = Server->new;
my $context = Zircon::Context::ZMQ::Tk->new(
    '-widget' => $main_window);
my $selection_id =
    sprintf "zapmop_%s_%06d"
    , $main_window->id, int(rand(1_000_000));
my $protocol = Zircon::Protocol->new(
    '-app_id'       => $app_id,
    '-context'      => $context,
    '-selection_id' => $selection_id,
    '-server'       => $server,
    );

$protocol->send_handshake(
    $peer_socket,
    sub {
        my ($result) = @_;
        printf "Zapmop: handshake: %s\n"
            , _message($result);
    });

MainLoop();

exit;

sub _message {
    my ($result) = @_;
    for ($result) {
        when ($_->isa('Zircon::Protocol::Result::Reply')) {
            return $result->success ? 'succeeded' : 'failed';
        }
        when ($_->isa('Zircon::Protocol::Result::Timeout')) {
            return 'timeout';
        }
        when (ref) {
            return sprintf 'unknown result: class: %s', ref;
        }
    }
    return 'unknown result';
}

package Server;

use base qw( Zircon::Protocol::Server );

sub new {
    my ($pkg) = @_;
    my $new = { };
    bless $new, $pkg;
    return $new;
}

=head1 AUTHOR

Ana Code B<email> anacode@sanger.ac.uk
